# -*- coding: utf-8 -*-
"""Task_3_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eecHZTn0V7dTtmetgJsjZVzcfVJQkLjn

# Пример уменьшения размерности

Рассмотрим основные моменты уменьшения размерности на примере из лекции (рукописные цифры).

Подключим требуемые библиотеки.
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from sklearn.decomposition import PCA
from sklearn import datasets
import matplotlib
import matplotlib.pyplot as plt
# %matplotlib inline
from google.colab import files

"""Импортируем датасет."""

# upload homework.csv
X = np.loadtxt(open("homework.csv", "rb"), delimiter=",")

X[0]

"""Уменьшим размерность при помощи библиотеки __sklearn__. Отдельно обращаем ваше внимание на параметр __svd_solver__, он отвечает за метод оптимизации. Дело в том, что в Python оптимизационные задачи решаются численно. При этом могут использоваться различные алгоритмы, а значит результаты могут несколько отличаться. Поэтому, чтобы получать одинаковые результаты, нужно использовать параметры модели, указанные в задании."""

pca = PCA(n_components=2, svd_solver='full') #Создание объекта класса PCA. В качестве параметров выступает количество ГК и метод оптимизации
X_transformed = pca.fit(X).transform(X) #X_transformed -- ndarray объектов, где каждый объект описывается двумя ГК
X_transformed[0]

"""Изобразим объекты в виде точек на плоскости."""

plt.plot(X_transformed[:, 0], X_transformed[:, 1], 'o', markerfacecolor='red', markeredgecolor='k', markersize=8)

"""Для дальнейшего анализа нам удобно будет построить не 2, а все 10 Главных Компонеты (хотя, конечно, это можно было сделать и сразу, а картинку строить лишь по первым двум)."""

pca = PCA(n_components=10, svd_solver='full')
X_full = pca.fit(X).transform(X)

X_full[0:3]

"""Найдем долю объясненной дисперсии в зависимости от количества используемых ГК."""

explained_variance = np.round(np.cumsum(pca.explained_variance_ratio_),3)
explained_variance

"""Построим график зависимости доли объясненной дисперсии от количества используемых ГК. Подробный описание произведено в лекции."""

plt.plot(np.arange(10), explained_variance, ls = '-')

