# -*- coding: utf-8 -*-
"""DecisionTree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DP2DAxBL5hemm3W4quQnq0v3R8Ca_eyw
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

"""# Новый раздел"""

df = pd.read_csv('diabetes.csv')

df.head()

"""Отбор первых 590 строк:"""

task_data = df.head(690)

"""Вывод числа строк в получившейся выборке и относящихся к классу 1 (пациент болен диабетом)"""

len(task_data[task_data['Outcome'] == 0])

"""Разделеные данных на тренировочные и тестовые. Первые 70% строк — тренировочные, остальные — тестовые."""

train = task_data.head(int(len(task_data)*0.8))
test = task_data.tail(int(len(task_data)*0.2))

"""Выделяем предикторы (8 первых столбцов) и отклик (Outcome):"""

features = list(train.columns[:8])
x = train[features]
y = train['Outcome']

"""Подключем классификатор DecisionTreeClassifier:"""

from sklearn.tree import DecisionTreeClassifier

"""Задаем параметры дерева принятия решений и обучаем модель:"""

tree = DecisionTreeClassifier(criterion='entropy', #критерий разделения
                              min_samples_leaf=10, #минимальное число объектов в листе
                              max_leaf_nodes=20, #максимальное число листьев
                              random_state=2020)
clf=tree.fit(x, y)

"""Подключаем библиотеку для визуализации дерева. Сохраняем в файл и выводим на экран."""

from sklearn.tree import export_graphviz
import graphviz
columns = list(x.columns)
export_graphviz(clf, out_file='tree.dot', 
                feature_names=columns,
                class_names=['0', '1'],
                rounded = True, proportion = False, 
                precision = 2, filled = True, label='all')

with open('tree.dot') as f:
    dot_graph = f.read()

graphviz.Source(dot_graph)

"""Выводим глубину дерева:"""

clf.tree_.max_depth

"""Выполняем предсказание для объектов из тестовой выборки:"""

features = list(test.columns[:8])
x = test[features]
y_true = test['Outcome']
y_pred = clf.predict(x)

"""Доля правильных ответов классификатора:"""

from sklearn.metrics import accuracy_score
accuracy_score(y_true, y_pred)

"""Среднее значение метрик $F_1$ (Macro-F1):"""

from sklearn.metrics import f1_score
f1_score(y_true, y_pred, average='macro')

"""Выполним предсказание для конкретного объекта (с индексом 708) исходных данных:"""

df.loc[729, features]

"""Назначенный класс:"""

clf.predict([df.loc[729, features].tolist()])[0]

